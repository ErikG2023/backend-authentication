
// ----- .env -----

DATABASE_HOST=localhost
DATABASE_PORT=5432
DATABASE_USERNAME=user
DATABASE_PASSWORD=password
DATABASE_NAME=ecommerce
JWT_SECRET=tu_secreto_jwt_muy_seguro
ACCESS_TOKEN_EXPIRATION=2m       # Duración del Access Token, por ejemplo, 15 minutos
REFRESH_TOKEN_EXPIRATION=7d       # Duración del Refresh Token, por ejemplo, 7 días


// ----- src/auth/dto/register.dto.ts -----

import {
  IsEmail,
  IsNotEmpty,
  MinLength,
  IsOptional,
  IsEnum,
} from 'class-validator';
import { UserRole } from '../../common/enums/user-role.enum';

export class RegisterDto {
  @IsEmail()
  email: string;

  @IsNotEmpty()
  @MinLength(8)
  password: string;

  @IsNotEmpty()
  firstName: string;

  @IsNotEmpty()
  lastName: string;

  @IsOptional()
  @IsEnum(UserRole)
  role?: UserRole;
}


// ----- src/auth/dto/login.dto.ts -----

import { IsEmail, IsNotEmpty } from 'class-validator';

export class LoginDto {
  @IsEmail()
  email: string;

  @IsNotEmpty()
  password: string;
}


// ----- src/auth/dto/refresh-token.dto.ts -----

import { IsNotEmpty, IsString } from 'class-validator';

export class RefreshTokenDto {
  @IsNotEmpty()
  @IsString()
  refresh_token: string;
}


// ----- src/auth/dto/forgot-password.dto.ts -----

import { IsEmail } from 'class-validator';

export class ForgotPasswordDto {
  @IsEmail()
  email: string;
}


// ----- src/auth/dto/reset-password.dto.ts -----

import { IsString, MinLength } from 'class-validator';

export class ResetPasswordDto {
  @IsString()
  token: string;

  @IsString()
  @MinLength(8)
  newPassword: string;
}


// ----- src/auth/entities/user.entity.ts -----

import {
  Entity,
  PrimaryGeneratedColumn,
  Column,
  CreateDateColumn,
  UpdateDateColumn,
  OneToMany,
} from 'typeorm';
import { UserRole } from '../../common/enums/user-role.enum';
import { RefreshToken } from './refresh-token.entity';
import { UserActivity } from './user-activity.entity';

@Entity('users')
export class User {
  @PrimaryGeneratedColumn('uuid')
  id: string;

  @Column({ unique: true })
  email: string;

  @Column()
  password: string;

  @Column()
  firstName: string;

  @Column()
  lastName: string;

  @Column({
    type: 'enum',
    enum: UserRole,
    default: UserRole.USER,
  })
  role: UserRole;

  @CreateDateColumn()
  createdAt: Date;

  @UpdateDateColumn()
  updatedAt: Date;

  @OneToMany(() => RefreshToken, (refreshToken) => refreshToken.user)
  refreshTokens: RefreshToken[];

  @OneToMany(() => UserActivity, (activity) => activity.user)
  activities: UserActivity[];

  @Column({ nullable: true })
  passwordResetToken: string;

  @Column({ nullable: true })
  passwordResetExpires: Date;
}


// ----- src/auth/entities/invalid-token.entity.ts -----

import {
  Entity,
  PrimaryGeneratedColumn,
  Column,
  CreateDateColumn,
} from 'typeorm';

@Entity('invalid_tokens')
export class InvalidToken {
  @PrimaryGeneratedColumn('uuid')
  id: string;

  @Column()
  token: string;

  @CreateDateColumn()
  createdAt: Date;
}


// ----- src/auth/entities/refresh-token.entity.ts -----

import {
  Entity,
  PrimaryGeneratedColumn,
  Column,
  ManyToOne,
  JoinColumn,
} from 'typeorm';
import { User } from './user.entity';

@Entity('refresh_tokens')
export class RefreshToken {
  @PrimaryGeneratedColumn('uuid')
  id: string;

  @Column()
  token: string;

  @Column()
  expiresAt: Date;

  @ManyToOne(() => User, (user) => user.refreshTokens)
  @JoinColumn({ name: 'userId' })
  user: User;

  @Column()
  userId: string;
}


// ----- src/auth/entities/user-activity.entity.ts -----

import {
  Entity,
  PrimaryGeneratedColumn,
  Column,
  ManyToOne,
  CreateDateColumn,
} from 'typeorm';
import { User } from './user.entity';

export enum ActivityType {
  LOGIN = 'login',
  LOGOUT = 'logout',
  REGISTER = 'register',
  PASSWORD_CHANGE = 'password_change',
  TOKEN_REFRESH = 'token_refresh',
  PASSWORD_RESET_REQUEST = 'password_reset_request',
  PASSWORD_RESET_SUCCESS = 'password_reset_success',
}

@Entity('user_activities')
export class UserActivity {
  @PrimaryGeneratedColumn('uuid')
  id: string;

  @ManyToOne(() => User, (user) => user.activities)
  user: User;

  @Column()
  userId: string;

  @Column({
    type: 'enum',
    enum: ActivityType,
  })
  activityType: ActivityType;

  @Column({ nullable: true })
  ipAddress: string;

  @Column({ nullable: true })
  userAgent: string;

  @CreateDateColumn()
  createdAt: Date;
}


// ----- src/auth/entities/login-attempt.entity.ts -----

import {
  Entity,
  Column,
  PrimaryGeneratedColumn,
  CreateDateColumn,
} from 'typeorm';

@Entity('login_attempts')
export class LoginAttempt {
  @PrimaryGeneratedColumn()
  id: number;

  @Column()
  email: string;

  @Column()
  ipAddress: string;

  @CreateDateColumn()
  createdAt: Date;

  @Column({ default: false })
  successful: boolean;
}


// ----- src/auth/guards/jwt-auth.guard.ts -----

import {
  Injectable,
  ExecutionContext,
  UnauthorizedException,
} from '@nestjs/common';
import { AuthGuard } from '@nestjs/passport';
import { AuthService } from '../auth.service';

@Injectable()
export class JwtAuthGuard extends AuthGuard('jwt') {
  constructor(private authService: AuthService) {
    super();
  }

  async canActivate(context: ExecutionContext): Promise<boolean> {
    const request = context.switchToHttp().getRequest();
    const token = this.extractTokenFromCookie(request);

    if (!token) {
      throw new UnauthorizedException('No token provided');
    }

    // Decodificar el token para obtener el userId
    const decodedToken = this.authService.decodeToken(token);
    if (!decodedToken || !decodedToken.sub) {
      throw new UnauthorizedException('Invalid token');
    }

    const isInvalidToken = await this.authService.isTokenInvalid(
      decodedToken.sub,
    );
    if (isInvalidToken) {
      throw new UnauthorizedException(
        'Token is invalid or has been logged out',
      );
    }

    return super.canActivate(context) as Promise<boolean>;
  }

  private extractTokenFromCookie(request: any): string | undefined {
    return request.cookies['access_token'];
  }
}


// ----- src/auth/guards/local-auth.guard.ts -----

import { Injectable } from '@nestjs/common';
import { AuthGuard } from '@nestjs/passport';

@Injectable()
export class LocalAuthGuard extends AuthGuard('local') {}


// ----- src/auth/strategies/jwt.strategy.ts -----

import { ExtractJwt, Strategy } from 'passport-jwt';
import { PassportStrategy } from '@nestjs/passport';
import { Injectable } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { Request } from 'express';

@Injectable()
export class JwtStrategy extends PassportStrategy(Strategy) {
  constructor(private configService: ConfigService) {
    super({
      jwtFromRequest: ExtractJwt.fromExtractors([
        (request: Request) => {
          return request?.cookies?.access_token;
        },
      ]),
      ignoreExpiration: false,
      secretOrKey: configService.get<string>('JWT_SECRET'),
    });
  }

  async validate(payload: any) {
    return {
      id: payload.sub,
      email: payload.email,
      role: payload.role, // Extraemos el rol del payload
    };
  }
}


// ----- src/auth/strategies/local.strategy.ts -----

import { Strategy } from 'passport-local';
import { PassportStrategy } from '@nestjs/passport';
import { Injectable, UnauthorizedException } from '@nestjs/common';
import { AuthService } from '../auth.service';
import { Request } from 'express'; // Importa el tipo Request de Express

@Injectable()
export class LocalStrategy extends PassportStrategy(Strategy) {
  constructor(private authService: AuthService) {
    super({
      usernameField: 'email',
      passReqToCallback: true,
    });
  }

  async validate(req: Request, email: string, password: string): Promise<any> {
    const ipAddress =
      (req.headers['x-forwarded-for'] as string) ||
      req.socket.remoteAddress ||
      'Unknown';
    try {
      const user = await this.authService.validateUser(
        email,
        password,
        ipAddress,
      );
      if (!user) {
        throw new UnauthorizedException('Invalid credentials');
      }
      return user;
    } catch (error) {
      console.error('Error in LocalStrategy validate:', error.message);
      throw error; // Re-lanza el error para que sea manejado por Nest
    }
  }
}


// ----- src/auth/auth.controller.ts -----

import {
  Controller,
  Post,
  UseGuards,
  Body,
  Get,
  Param,
  Res,
  Req,
  UnauthorizedException,
  Put,
} from '@nestjs/common';
import { AuthService } from './auth.service';
import { LocalAuthGuard } from './guards/local-auth.guard';
import { JwtAuthGuard } from './guards/jwt-auth.guard';
import { RegisterDto } from './dto/register.dto';
import { ForgotPasswordDto } from './dto/forgot-password.dto';
import { ResetPasswordDto } from './dto/reset-password.dto';
import { Request, Response } from 'express';
import { UpdateUserDto } from './dto/update-user.dto';

// Extendemos la interfaz Request de Express para incluir las propiedades adicionales
interface ExtendedRequest extends Request {
  user?: any;
}

@Controller('auth')
export class AuthController {
  constructor(private authService: AuthService) {}

  @Post('register')
  async register(
    @Body() registerDto: RegisterDto,
    @Req() req: ExtendedRequest,
  ) {
    const ipAddress =
      req.ip || (req.socket?.remoteAddress as string) || 'Unknown';
    const userAgent = req.get('user-agent') || 'Unknown';
    return this.authService.register(registerDto, ipAddress, userAgent);
  }

  @UseGuards(LocalAuthGuard)
  @Post('login')
  async login(
    @Req() req: ExtendedRequest,
    @Res({ passthrough: true }) res: Response,
  ) {
    const ipAddress =
      req.ip || (req.socket?.remoteAddress as string) || 'Unknown';
    const userAgent = req.get('user-agent') || 'Unknown';
    return this.authService.login(req.user, ipAddress, userAgent, res);
  }

  @UseGuards(JwtAuthGuard)
  @Post('logout')
  async logout(
    @Req() req: ExtendedRequest,
    @Res({ passthrough: true }) res: Response,
  ) {
    const ipAddress =
      req.ip || (req.socket?.remoteAddress as string) || 'Unknown';
    const userAgent = req.get('user-agent') || 'Unknown';
    const userId = req.user?.id || req.user?.sub;
    return this.authService.logout(userId, ipAddress, userAgent, res);
  }

  @UseGuards(JwtAuthGuard)
  @Get('user/:id')
  async getUserById(@Param('id') id: string, @Req() req: ExtendedRequest) {
    console.log('User in controller:', req.user);
    return this.authService.getUserById(id, req.user);
  }

  @Post('refresh')
  async refreshToken(
    @Req() req: ExtendedRequest,
    @Res({ passthrough: true }) res: Response,
  ) {
    const refreshToken = req.cookies['refresh_token'];
    if (!refreshToken) {
      throw new UnauthorizedException('Refresh token not found');
    }

    const ipAddress =
      req.ip || (req.socket?.remoteAddress as string) || 'Unknown';
    const userAgent = req.get('user-agent') || 'Unknown';

    return this.authService.refreshToken(
      refreshToken,
      ipAddress,
      userAgent,
      res,
    );
  }

  @Post('forgot-password')
  async forgotPassword(
    @Body() forgotPasswordDto: ForgotPasswordDto,
    @Req() req: ExtendedRequest,
  ) {
    const ipAddress =
      req.ip || (req.socket?.remoteAddress as string) || 'Unknown';
    const userAgent = req.get('user-agent') || 'Unknown';
    await this.authService.forgotPassword(
      forgotPasswordDto.email,
      ipAddress,
      userAgent,
    );
    return { message: 'If the email exists, a reset link has been sent.' };
  }

  @Post('reset-password')
  async resetPassword(
    @Body() resetPasswordDto: ResetPasswordDto,
    @Req() req: ExtendedRequest,
  ) {
    const ipAddress =
      req.ip || (req.socket?.remoteAddress as string) || 'Unknown';
    const userAgent = req.get('user-agent') || 'Unknown';
    await this.authService.resetPassword(
      resetPasswordDto.token,
      resetPasswordDto.newPassword,
      ipAddress,
      userAgent,
    );
    return { message: 'Password has been reset successfully.' };
  }

  @UseGuards(JwtAuthGuard)
  @Get('verify-token')
  async verifyToken(@Req() req: ExtendedRequest) {
    const userId = req.user?.id;
    return this.authService.verifyToken(userId);
  }

  @UseGuards(JwtAuthGuard)
  @Get('users')
  async getUsers(@Req() req: ExtendedRequest) {
    return this.authService.getUsers(req.user);
  }

  @UseGuards(JwtAuthGuard)
  @Put('user/:id')
  async updateUser(
    @Param('id') id: string,
    @Body() updateUserDto: UpdateUserDto,
    @Req() req: ExtendedRequest,
  ) {
    return this.authService.updateUser(id, updateUserDto, req.user);
  }
}


// ----- src/auth/auth.module.ts -----

import { Module } from '@nestjs/common';
import { TypeOrmModule } from '@nestjs/typeorm';
import { JwtModule } from '@nestjs/jwt';
import { PassportModule } from '@nestjs/passport';
import { ConfigModule, ConfigService } from '@nestjs/config';
import { AuthController } from './auth.controller';
import { AuthService } from './auth.service';
import { User } from './entities/user.entity';
import { RefreshToken } from './entities/refresh-token.entity';
import { InvalidToken } from './entities/invalid-token.entity';
import { JwtStrategy } from './strategies/jwt.strategy';
import { LocalStrategy } from './strategies/local.strategy';
import { JwtAuthGuard } from './guards/jwt-auth.guard';
import { TokenCleanupService } from './token-cleanup.service';
import { UserActivity } from './entities/user-activity.entity';
import { UserActivityService } from './user-activity.service';
import { LoginAttempt } from './entities/login-attempt.entity';

@Module({
  imports: [
    PassportModule,
    TypeOrmModule.forFeature([
      User,
      RefreshToken,
      InvalidToken,
      UserActivity,
      LoginAttempt,
    ]),
    JwtModule.registerAsync({
      imports: [ConfigModule],
      useFactory: async (configService: ConfigService) => ({
        secret: configService.get('JWT_SECRET'),
        signOptions: {
          expiresIn: configService.get<string>('ACCESS_TOKEN_EXPIRATION'),
        }, // Duración del Access Token desde el .env
      }),
      inject: [ConfigService],
    }),
  ],
  controllers: [AuthController],
  providers: [
    AuthService,
    JwtStrategy,
    LocalStrategy,
    JwtAuthGuard,
    TokenCleanupService,
    UserActivityService,
  ],
  exports: [AuthService, JwtAuthGuard],
})
export class AuthModule {}


// ----- src/auth/auth.service.ts -----

import {
  Injectable,
  UnauthorizedException,
  ConflictException,
  InternalServerErrorException,
  NotFoundException,
} from '@nestjs/common';
import { JwtService } from '@nestjs/jwt';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository, LessThan, MoreThan } from 'typeorm';
import { User } from './entities/user.entity';
import { RegisterDto } from './dto/register.dto';
import * as bcrypt from 'bcrypt';
import { RefreshToken } from './entities/refresh-token.entity';
import { v4 as uuidv4 } from 'uuid';
import { InvalidToken } from './entities/invalid-token.entity';
import { ConfigService } from '@nestjs/config';
import { UserActivityService } from './user-activity.service';
import { ActivityType } from './entities/user-activity.entity';
import { LoginAttempt } from './entities/login-attempt.entity';
import { AuthUtils } from './auth.utils';
import { UserRole } from '../common/enums/user-role.enum';
import { Response } from 'express';
import { UpdateUserDto } from './dto/update-user.dto';

@Injectable()
export class AuthService {
  private readonly MAX_LOGIN_ATTEMPTS = 5;
  private readonly LOCKOUT_TIME = 2 * 60 * 1000; // 2 minutos en milisegundos

  constructor(
    @InjectRepository(User)
    private usersRepository: Repository<User>,
    @InjectRepository(RefreshToken)
    private refreshTokenRepository: Repository<RefreshToken>,
    @InjectRepository(InvalidToken)
    private invalidTokenRepository: Repository<InvalidToken>,
    @InjectRepository(LoginAttempt)
    private loginAttemptRepository: Repository<LoginAttempt>,
    private jwtService: JwtService,
    private configService: ConfigService,
    private userActivityService: UserActivityService,
  ) {}

  async validateUser(
    email: string,
    pass: string,
    ipAddress: string,
  ): Promise<any> {
    const now = new Date();
    console.log(`[${now.toISOString()}] Attempting to validate user: ${email}`);

    const lockoutPeriodStart = new Date(now.getTime() - this.LOCKOUT_TIME);

    const recentFailedAttempts = await this.loginAttemptRepository.count({
      where: {
        email,
        successful: false,
        createdAt: MoreThan(lockoutPeriodStart),
      },
    });

    console.log(`Recent failed attempts: ${recentFailedAttempts}`);

    const lastFailedAttempt = await this.loginAttemptRepository.findOne({
      where: {
        email,
        successful: false,
      },
      order: { createdAt: 'DESC' },
    });

    let isLockoutPeriodOver = true;
    let remainingLockoutTime = 0;

    if (lastFailedAttempt) {
      isLockoutPeriodOver = AuthUtils.isLockoutPeriodOver(
        lastFailedAttempt.createdAt,
        this.LOCKOUT_TIME,
      );
      remainingLockoutTime = AuthUtils.calculateRemainingLockoutTime(
        lastFailedAttempt.createdAt,
        this.LOCKOUT_TIME,
      );

      console.log(
        `Last failed attempt: ${lastFailedAttempt.createdAt.toISOString()}`,
      );
      console.log(`Current time: ${now.toISOString()}`);
      console.log(`Remaining lockout time: ${remainingLockoutTime} ms`);
    }

    console.log(`Is lockout period over: ${isLockoutPeriodOver}`);

    if (
      recentFailedAttempts >= this.MAX_LOGIN_ATTEMPTS &&
      !isLockoutPeriodOver
    ) {
      const remainingMinutes = Math.ceil(remainingLockoutTime / 60000);
      console.log(
        `Account is locked. Remaining lockout time: ${remainingMinutes} minutes`,
      );
      throw new UnauthorizedException(
        `Demasiados intentos fallidos. Por favor, inténtelo de nuevo en ${remainingMinutes} minuto(s).`,
      );
    }

    const user = await this.usersRepository.findOne({ where: { email } });
    if (user && (await bcrypt.compare(pass, user.password))) {
      await this.loginAttemptRepository.save({
        email,
        ipAddress,
        successful: true,
      });
      console.log(`[${now.toISOString()}] Login successful`);
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      const { password, ...result } = user;
      return result;
    }

    await this.loginAttemptRepository.save({
      email,
      ipAddress,
      successful: false,
    });
    console.log(`[${now.toISOString()}] Login failed`);

    await this.cleanupOldAttempts(email);

    return null;
  }

  private async cleanupOldAttempts(email: string) {
    const cleanupDate = new Date(Date.now() - this.LOCKOUT_TIME);
    const result = await this.loginAttemptRepository.delete({
      email,
      createdAt: LessThan(cleanupDate),
    });
    console.log(
      `Cleaned up ${result.affected} old login attempts for ${email}`,
    );
  }

  async register(
    registerDto: RegisterDto,
    ipAddress: string,
    userAgent: string,
  ): Promise<User> {
    const { email, password, firstName, lastName, role } = registerDto;

    const existingUser = await this.usersRepository.findOne({
      where: { email },
    });
    if (existingUser) {
      throw new ConflictException('User already exists');
    }

    const user = new User();
    user.email = email;
    user.firstName = firstName;
    user.lastName = lastName;
    user.role = role;

    const salt = await bcrypt.genSalt();
    user.password = await bcrypt.hash(password, salt);

    try {
      const savedUser = await this.usersRepository.save(user);
      await this.userActivityService.logActivity(
        savedUser,
        ActivityType.REGISTER,
        ipAddress,
        userAgent,
      );
      return savedUser;
    } catch (error) {
      throw new InternalServerErrorException('Error creating user');
    }
  }

  async login(
    user: any,
    ipAddress: string,
    userAgent: string,
    response: Response,
  ) {
    const payload = {
      email: user.email,
      sub: user.id,
      role: user.role,
    };
    const accessToken = this.jwtService.sign(payload);
    const refreshToken = await this.createRefreshToken(user);

    await this.invalidTokenRepository.delete({ token: user.id });

    await this.userActivityService.logActivity(
      user,
      ActivityType.LOGIN,
      ipAddress,
      userAgent,
    );

    const accessTokenExpiration = AuthUtils.parseDurationToMs(
      this.configService.get<string>('ACCESS_TOKEN_EXPIRATION'),
    );
    const refreshTokenExpiration = AuthUtils.parseDurationToMs(
      this.configService.get<string>('REFRESH_TOKEN_EXPIRATION'),
    );

    response.cookie('access_token', accessToken, {
      httpOnly: true,
      secure: this.configService.get('NODE_ENV') === 'production',
      sameSite: 'strict',
      maxAge: accessTokenExpiration,
    });

    response.cookie('refresh_token', refreshToken.token, {
      httpOnly: true,
      secure: this.configService.get('NODE_ENV') === 'production',
      sameSite: 'strict',
      maxAge: refreshTokenExpiration,
    });

    return {
      message: 'Login successful',
      user: {
        id: user.id,
        email: user.email,
        role: user.role,
      },
    };
  }

  async createRefreshToken(user: User): Promise<RefreshToken> {
    const refreshToken = new RefreshToken();
    refreshToken.user = user;
    refreshToken.token = uuidv4();
    refreshToken.expiresAt = new Date(
      Date.now() + this.getRefreshTokenExpiration(),
    );
    return this.refreshTokenRepository.save(refreshToken);
  }

  private getRefreshTokenExpiration(): number {
    const duration = this.configService.get<string>('REFRESH_TOKEN_EXPIRATION');
    return AuthUtils.parseDurationToMs(duration);
  }

  async refreshToken(
    token: string,
    ipAddress: string,
    userAgent: string,
    response: Response,
  ) {
    AuthUtils.validateRefreshToken(token);

    const refreshToken = await this.refreshTokenRepository.findOne({
      where: { token },
      relations: ['user'],
    });

    if (!refreshToken || refreshToken.expiresAt < new Date()) {
      throw new UnauthorizedException('Invalid refresh token');
    }

    const invalidToken = await this.invalidTokenRepository.findOne({
      where: { token: refreshToken.user.id },
    });

    if (invalidToken) {
      await this.refreshTokenRepository.remove(refreshToken);
      throw new UnauthorizedException('Session has been invalidated');
    }

    const user = refreshToken.user;
    const payload = { email: user.email, sub: user.id, role: user.role };
    const accessToken = this.jwtService.sign(payload, {
      expiresIn: this.configService.get<string>('ACCESS_TOKEN_EXPIRATION'),
    });

    await this.refreshTokenRepository.remove(refreshToken);
    const newRefreshToken = await this.createRefreshToken(user);

    await this.userActivityService.logActivity(
      user,
      ActivityType.TOKEN_REFRESH,
      ipAddress,
      userAgent,
    );

    const accessTokenExpiration = AuthUtils.parseDurationToMs(
      this.configService.get<string>('ACCESS_TOKEN_EXPIRATION'),
    );
    const refreshTokenExpiration = AuthUtils.parseDurationToMs(
      this.configService.get<string>('REFRESH_TOKEN_EXPIRATION'),
    );

    response.cookie('access_token', accessToken, {
      httpOnly: true,
      secure: this.configService.get('NODE_ENV') === 'production',
      sameSite: 'strict',
      maxAge: accessTokenExpiration,
    });

    response.cookie('refresh_token', newRefreshToken.token, {
      httpOnly: true,
      secure: this.configService.get('NODE_ENV') === 'production',
      sameSite: 'strict',
      maxAge: refreshTokenExpiration,
    });

    return {
      message: 'Token refreshed successfully',
      user: {
        id: user.id,
        email: user.email,
        role: user.role,
      },
    };
  }

  decodeToken(token: string): any {
    try {
      return this.jwtService.verify(token);
    } catch (error) {
      return null;
    }
  }

  async isTokenInvalid(userId: string): Promise<boolean> {
    const invalidToken = await this.invalidTokenRepository.findOne({
      where: { token: userId },
    });
    return !!invalidToken;
  }

  async logout(
    userId: string,
    ipAddress: string,
    userAgent: string,
    response: Response,
  ) {
    const user = await this.usersRepository.findOne({ where: { id: userId } });
    if (!user) {
      throw new UnauthorizedException('Invalid user');
    }

    await this.invalidTokenRepository.save({ token: userId });
    await this.refreshTokenRepository.delete({ userId });

    await this.userActivityService.logActivity(
      user,
      ActivityType.LOGOUT,
      ipAddress,
      userAgent,
    );

    response.clearCookie('access_token');
    response.clearCookie('refresh_token');

    return { message: 'Logout successful' };
  }

  async getUserById(id: string, requestUser: any): Promise<User> {
    console.log('Request User:', requestUser);

    const isInvalidToken = await this.isTokenInvalid(requestUser.id);
    if (isInvalidToken) {
      throw new UnauthorizedException('Token has been invalidated');
    }

    if (requestUser.role !== UserRole.ADMIN) {
      throw new UnauthorizedException(
        'Only administrators can access user information',
      );
    }

    const user = await this.usersRepository.findOne({ where: { id } });
    if (!user) {
      throw new NotFoundException(`User with ID "${id}" not found`);
    }

    console.log('Requested User:', user);

    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    const { password, ...result } = user;
    return result as User;
  }

  async forgotPassword(
    email: string,
    ipAddress: string,
    userAgent: string,
  ): Promise<void> {
    const user = await this.usersRepository.findOne({ where: { email } });
    if (!user) {
      return;
    }

    const resetToken = uuidv4();
    const resetTokenExpiration = new Date();
    resetTokenExpiration.setHours(resetTokenExpiration.getHours() + 1);

    user.passwordResetToken = resetToken;
    user.passwordResetExpires = resetTokenExpiration;
    await this.usersRepository.save(user);

    await this.userActivityService.logActivity(
      user,
      ActivityType.PASSWORD_RESET_REQUEST,
      ipAddress,
      userAgent,
    );

    console.log(
      `Password reset link: http://yourfrontend.com/reset-password?token=${resetToken}`,
    );
  }

  async resetPassword(
    token: string,
    newPassword: string,
    ipAddress: string,
    userAgent: string,
  ): Promise<void> {
    const user = await this.usersRepository.findOne({
      where: { passwordResetToken: token },
    });

    if (!user || user.passwordResetExpires < new Date()) {
      throw new UnauthorizedException(
        'Invalid or expired password reset token',
      );
    }

    const hashedPassword = await bcrypt.hash(newPassword, 10);
    user.password = hashedPassword;
    user.passwordResetToken = null;
    user.passwordResetExpires = null;

    await this.usersRepository.save(user);

    await this.userActivityService.logActivity(
      user,
      ActivityType.PASSWORD_RESET_SUCCESS,
      ipAddress,
      userAgent,
    );
  }

  async verifyToken(userId: string) {
    const isInvalidToken = await this.isTokenInvalid(userId);
    if (isInvalidToken) {
      throw new UnauthorizedException('Token has been invalidated');
    }

    const user = await this.usersRepository.findOne({ where: { id: userId } });
    if (!user) {
      throw new UnauthorizedException('User not found');
    }

    // Excluir la contraseña y otra información sensible
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    const { password, passwordResetToken, passwordResetExpires, ...result } =
      user;

    return {
      isValid: true,
      user: result,
    };
  }

  async getUsers(requestUser: any): Promise<User[]> {
    if (requestUser.role !== UserRole.ADMIN) {
      throw new UnauthorizedException(
        'Only administrators can access user list',
      );
    }

    const users = await this.usersRepository.find();
    return users.map((user) => {
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      const { password, ...result } = user;
      return result as User;
    });
  }

  async updateUser(
    id: string,
    updateUserDto: UpdateUserDto,
    requestUser: any,
  ): Promise<User> {
    const userToUpdate = await this.usersRepository.findOne({ where: { id } });
    if (!userToUpdate) {
      throw new NotFoundException(`User with ID "${id}" not found`);
    }

    if (requestUser.id !== id && requestUser.role !== UserRole.ADMIN) {
      throw new UnauthorizedException(
        'You are not authorized to update this user',
      );
    }

    // Solo los administradores pueden cambiar roles
    if (updateUserDto.role && requestUser.role !== UserRole.ADMIN) {
      throw new UnauthorizedException(
        'Only administrators can change user roles',
      );
    }

    // Verificar si el email ya está en uso
    if (updateUserDto.email && updateUserDto.email !== userToUpdate.email) {
      const userWithEmail = await this.usersRepository.findOne({
        where: { email: updateUserDto.email },
      });
      if (userWithEmail) {
        throw new ConflictException('Email is already in use');
      }
    }

    // Actualizar los campos
    Object.assign(userToUpdate, updateUserDto);

    // Si se proporciona una nueva contraseña, hashearla
    if (updateUserDto.password) {
      const salt = await bcrypt.genSalt();
      userToUpdate.password = await bcrypt.hash(updateUserDto.password, salt);
    }

    await this.usersRepository.save(userToUpdate);

    // Eliminar la contraseña del objeto de respuesta
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    const { password, ...result } = userToUpdate;
    return result as User;
  }
}


// ----- src/auth/token-cleanup.service.ts -----

import { Injectable, Logger } from '@nestjs/common';
import { Cron, CronExpression } from '@nestjs/schedule';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository, LessThan } from 'typeorm';
import { InvalidToken } from './entities/invalid-token.entity';

@Injectable()
export class TokenCleanupService {
  private readonly logger = new Logger(TokenCleanupService.name);

  constructor(
    @InjectRepository(InvalidToken)
    private invalidTokenRepository: Repository<InvalidToken>,
  ) {}

  @Cron(CronExpression.EVERY_DAY_AT_MIDNIGHT)
  async handleTokenCleanup() {
    this.logger.debug('Starting token cleanup');

    const oneWeekAgo = new Date();
    oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);

    const result = await this.invalidTokenRepository.delete({
      createdAt: LessThan(oneWeekAgo),
    });

    this.logger.debug(`Cleaned up ${result.affected} invalid tokens`);
  }
}


// ----- src/auth/user-activity.service.ts -----

// src/auth/user-activity.service.ts

import { Injectable } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { UserActivity, ActivityType } from './entities/user-activity.entity';
import { User } from './entities/user.entity';

@Injectable()
export class UserActivityService {
  constructor(
    @InjectRepository(UserActivity)
    private userActivityRepository: Repository<UserActivity>,
  ) {}

  async logActivity(
    user: User,
    activityType: ActivityType,
    ipAddress: string,
    userAgent: string,
  ) {
    const activity = new UserActivity();
    activity.user = user;
    activity.userId = user.id;
    activity.activityType = activityType;
    activity.ipAddress = ipAddress;
    activity.userAgent = userAgent;

    await this.userActivityRepository.save(activity);
  }
}


// ----- src/auth/auth.utils.ts -----

import { UnauthorizedException } from '@nestjs/common';

export class AuthUtils {
  static parseDurationToMs(duration: string): number {
    const units = {
      s: 1000,
      m: 1000 * 60,
      h: 1000 * 60 * 60,
      d: 1000 * 60 * 60 * 24,
    };
    const match = duration.match(/^(\d+)([smhd])$/);
    if (!match) {
      throw new Error('Invalid duration format');
    }
    const value = parseInt(match[1], 10);
    const unit = match[2] as keyof typeof units;
    return value * units[unit];
  }

  static extractTokenFromHeader(request: any): string | undefined {
    const [type, token] = request.headers.authorization?.split(' ') ?? [];
    return type === 'Bearer' ? token : undefined;
  }

  static validateRefreshToken(refreshToken: string | undefined): void {
    if (!refreshToken) {
      throw new UnauthorizedException('Refresh token is required');
    }
  }

  static isLockoutPeriodOver(
    lastFailedAttempt: Date,
    lockoutTime: number,
  ): boolean {
    const now = new Date();
    return now.getTime() - lastFailedAttempt.getTime() >= lockoutTime;
  }

  static calculateRemainingLockoutTime(
    lastFailedAttempt: Date,
    lockoutTime: number,
  ): number {
    const now = new Date();
    return Math.max(
      0,
      lockoutTime - (now.getTime() - lastFailedAttempt.getTime()),
    );
  }
}


// ----- src/common/enums/user-role.enum.ts -----

export enum UserRole {
  USER = 'user',
  ADMIN = 'admin',
}


// ----- src/config/typeorm.config.ts -----

import { ConfigService } from '@nestjs/config';
import { TypeOrmModuleOptions } from '@nestjs/typeorm';

export const getTypeOrmConfig = async (
  configService: ConfigService,
): Promise<TypeOrmModuleOptions> => ({
  type: 'postgres',
  host: configService.get('DATABASE_HOST'),
  port: +configService.get<number>('DATABASE_PORT'),
  username: configService.get('DATABASE_USERNAME'),
  password: configService.get('DATABASE_PASSWORD'),
  database: configService.get('DATABASE_NAME'),
  entities: ['dist/**/*.entity.js'],
  migrations: ['dist/migrations/*.js'],
  migrationsRun: true,
  synchronize: false,
  logging: false, // Esto para ver las consultas sql
  extra: {
    // Esto establecerá la zona horaria para las consultas
    timezone: 'Z',
  },
});


// ----- src/app.module.ts -----

import { Module } from '@nestjs/common';
import { TypeOrmModule } from '@nestjs/typeorm';
import { ConfigModule, ConfigService } from '@nestjs/config';
import { ScheduleModule } from '@nestjs/schedule';
import { AuthModule } from './auth/auth.module';
import { getTypeOrmConfig } from './config/typeorm.config';

@Module({
  imports: [
    ConfigModule.forRoot({
      isGlobal: true,
    }),
    TypeOrmModule.forRootAsync({
      imports: [ConfigModule],
      useFactory: getTypeOrmConfig,
      inject: [ConfigService],
    }),
    ScheduleModule.forRoot(),
    AuthModule,
  ],
})
export class AppModule {}


// ----- ormconfig.ts -----

import { DataSource } from 'typeorm';
import { ConfigService } from '@nestjs/config';
import { config } from 'dotenv';

config();

const configService = new ConfigService();

export default new DataSource({
  type: 'postgres',
  host: configService.get('DATABASE_HOST'),
  port: +configService.get<number>('DATABASE_PORT'),
  username: configService.get('DATABASE_USERNAME'),
  password: configService.get('DATABASE_PASSWORD'),
  database: configService.get('DATABASE_NAME'),
  entities: ['src/**/*.entity.ts'],
  migrations: ['src/migrations/*.ts'],
  migrationsTableName: 'migrations',
  synchronize: false,
  logging: true,
  logger: 'file',
});


// ----- docker-compose.yml -----

version: '3'
services:
  db:
    image: postgres:13
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: ecommerce
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      TZ: 'UTC'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    command: ['postgres', '-c', 'timezone=UTC']

volumes:
  postgres_data:
